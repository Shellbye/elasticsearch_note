input {
    file {
        type => uwsgid_demo
        path => ["/Users/shellbye/Downloads/uwsgi_demo.log"]
        path => ["/tmp/ocr_search.log"]
        path => ["/tmp/qs.log"]
    }
}

filter {
    grok {
        match => { "message" => "\[pid: %{NUMBER:pid}\|app: %{NUMBER:id}\|req: %{NUMBER:currentReq}/%{NUMBER:totalReq}\] %{IP:remoteAddr} \(%{WORD:remoteUser}?\) \{%{NUMBER:CGIVar} vars in %{NUMBER:CGISize} bytes\} \[%{DATA:timestamp}\] %{WORD:method} %{URIPATHPARAM:uri} \=\> generated %{NUMBER:resSize} bytes in %{NUMBER:resTime} msecs \(HTTP/%{NUMBER:httpVer} %{NUMBER:status}\) %{NUMBER:headers} headers in %{NUMBER:headersSize} bytes %{GREEDYDATA:coreInfo}" }
    }

    mutate {
        convert => ["status", "integer"]
        convert => ["resSize", "integer"]
        convert => ["resTime", "float"]
    }

    geoip {
        source => "remoteAddr"
        target => "geoip"
        add_tag => [ "uwsgi-geoip" ]
    }

    date {
        match => [ "timestamp", "EEE MMM d HH:mm:ss y", "EEE MMM  d HH:mm:ss y" ]
        remove_field => [ "timestamp" ]
    }

    if "_grokparsefailure" in [tags] {
        drop {}
    }

}

output {
    elasticsearch {
        hosts => [ "localhost:9200" ]
        index => "demo-uwsgi-%{+YYYY.MM.dd}"
    }
}
